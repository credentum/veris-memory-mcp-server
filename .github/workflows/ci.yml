name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Format check with black
      run: |
        black --check --diff src tests

    - name: Import sort check with isort
      run: |
        isort --check-only --diff src tests

    - name: Type check with mypy
      run: |
        mypy src --config-file mypy.ini

    - name: Test with pytest
      run: |
        pytest --cov=src/veris_memory_mcp_server --cov-report=xml --cov-report=term-missing
      env:
        VERIS_MEMORY_API_KEY: "test-key"
        VERIS_MEMORY_USER_ID: "test-user"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Security audit with bandit
      run: |
        bandit -r src/ -f json -o bandit-results.json || true
        bandit -r src/

    - name: Check dependencies with safety
      run: |
        safety check --json --output safety-results.json || true
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration-test:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Test CLI entry point
      run: |
        veris-memory-mcp-server --help

    - name: Test configuration generation
      run: |
        veris-memory-mcp-server init --config test-config.json
        cat test-config.json

    - name: Validate MCP protocol (mock test)
      run: |
        # This would normally test against a real MCP host
        # For now, just verify the server can start
        timeout 5s veris-memory-mcp-server --log-level DEBUG || true
      env:
        VERIS_MEMORY_API_KEY: "test-key"
        VERIS_MEMORY_USER_ID: "test-user"